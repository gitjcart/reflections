When would you want to use a remote repository rather than keeping all your work local?
  You'd want to work locally if you are the only contributor to the file. If you are working in teams you may want to keep your work accessible for other colleagues.
Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
	that can create too many commits and too much confusion between contributors.  Its best practice to make changes in one place and manually 'push' or 'pull' the changes to/from Git and/or GitHub.
Describe the differences between forks, clones, and branches. When would you use one instead of another?
	Forks are unique to GitHub only. They are exactly like a clone, except only cloned to your GitHub account.
	Clones can be pulled from a local or GitHub repository to a local machine.
	Branches take different routes than the main code. They are useful for different versions of code or with multiple contributors.
What is the benefit of having a copy of the last known state of the remote stored locally?
	The benefit of having a copy of the last known state of a remote stored locally is having access to whatever changes have been introduced while you were offline (AFK). Then, you can contribute to those changes, delete them, or keep them for good into a new master HEAD.
How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
	Without using git or github, we would need to send files to each other individually. Then, we would need to compare the files individually to see where the changes are located. Afterward, We would need to save one file or the other, delete the file and move on. This creates several, several problems right off the bat. The code will not have a history, it will not have time stamps, it will not be able to be recalled to an earlier version. Git changes the way collaborations and contributions are made to code. It takes us into the future and allows us to use the tools of the professionals to make beautiful codes.
When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
	when you have changes that are experimental or questionable in nature. When you want to make changes that could affect code in other places. If you want to "try" something you should make a new branch and commit those changes, then possibly merge the commit's later in the process