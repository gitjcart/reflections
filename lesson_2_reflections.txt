What happens when you initialize a repository? Why do you need to do it?

When you initialize a git repository, it creates a .git directory in the PWD. This enables you to start saving git repositories within the git system.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The Staging area is the area in between the Repository and the working directory. You can do a "soft" save into the staging area, then actually commit the save into the repository.

How can you use the staging area to make sure you have one commit per logical change?

You can use the command 'git diff' to check the staging area against the most recent commit to see if they are the same or different. You can also check to see what differences are contained within each respective file.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

If you want to make "experimental" changes to your coding, then you should create a branch on your master git repository to save different versions of the program. Branches will help by keeping the working copy intact, while allowing you to makes changes to the code and save it in a different location. You can always 'git checkout' and go back to the master branch of the program. This allows trmendous flexibility and oversight for your projects.

How do the diagrams help you visualize the branch structure?

The diagram helps you understand the flow of data inside the git architecture. It lets you put pathways that are easier to understand than just plain text output of a terminal.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result of merging two branches is a repository of code that has more developmen. You can have multiple branches wit multiple developers commiting to the project. One could decide to merge two different versions of code, one set of code with certain features and another set of code with certain features and this merge will result in those two different versions of code being combined into one version of the code with a new "master head."

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Auto merging is faster when you don't have different versions floating around, being done by multiple people.  Manually merging is a way to merge when you have multiple versions of the code and multiple people working on the code.